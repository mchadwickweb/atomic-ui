{
  "version": 3,
  "sources": ["../index.ts", "../elements/src/Heading/index.tsx", "../elements/src/Text/index.tsx", "../elements/src/List.tsx", "../elements/src/Divider.tsx", "../elements/src/Blockquote.tsx", "../elements/src/Link.tsx", "../components/src/TextField/index.tsx", "../structure/src/Section/index.tsx"],
  "sourcesContent": ["export * from \"./elements/src/Heading\";\nexport * from \"./elements/src/Text\";\nexport * from \"./elements/src/List\";\nexport * from \"./elements/src/Divider\";\nexport * from \"./elements/src/Blockquote\";\nexport * from \"./elements/src/Link\";\n\nexport * from \"./components/src/TextField\";\n\nexport * from \"./structure/src/Section\";\n", "import React from \"react\";\nimport \"./Heading.css\";\n\nexport interface HeadingProps {\n  children: React.ReactNode;\n  as: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n  align?: \"left\" | \"center\" | \"right\";\n}\n\nexport function Heading({ children, as, align = \"left\" }: HeadingProps) {\n  switch (as) {\n    case \"h6\":\n      return <h6 data-heading-align={align}>{children}</h6>;\n    case \"h5\":\n      return <h5 data-heading-align={align}>{children}</h5>;\n    case \"h4\":\n      return <h4 data-heading-align={align}>{children}</h4>;\n    case \"h3\":\n      return <h3 data-heading-align={align}>{children}</h3>;\n    case \"h2\":\n      return <h2 data-heading-align={align}>{children}</h2>;\n    default:\n      return <h1 data-heading-align={align}>{children}</h1>;\n  }\n}\n", "import React from \"react\";\nimport \"./Text.css\";\n\nexport interface TextProps {\n  children: React.ReactNode;\n  align?: \"left\" | \"center\" | \"right\";\n}\n\nexport function Text({ children, align = \"left\" }: TextProps) {\n  return <p data-text-align={align}>{children}</p>;\n}\n", "import React from \"react\";\n\nexport interface ListItemProps {\n  children: React.ReactNode;\n}\n\nexport function ListItem({ children }: ListItemProps) {\n  return <li>{children}</li>;\n}\n\nexport interface ListProps {\n  children: React.ReactNode;\n  as: string;\n}\n\nexport function List({ as, children }: ListProps) {\n  if (as === \"ol\") {\n    return <ol role=\"list\">{children}</ol>;\n  }\n\n  return <ul role=\"list\">{children}</ul>;\n}\n", "import React from \"react\";\n\nexport function Divider() {\n  return <hr />;\n}\n", "import React from \"react\";\nexport interface BlockquoteProps {\n  children: React.ReactNode;\n  cite?: string;\n}\n\nexport function Blockquote({ children, cite }: BlockquoteProps) {\n  return <blockquote cite={cite}>{children}</blockquote>;\n}\n", "import React from \"react\";\n\nexport interface LinkProps {\n  children: React.ReactNode;\n  href: string;\n  as: \"link\" | \"button\";\n}\n\nexport function Link({ children, href, as = \"link\" }: LinkProps) {\n  return (\n    <a data-type={as} href={href}>\n      {children}\n    </a>\n  );\n}\n", "import React, { AllHTMLAttributes } from \"react\";\n\ntype InputElementProps = AllHTMLAttributes<HTMLInputElement>;\n\nconst validInputTypes = {\n  text: \"text\",\n  password: \"password\",\n  email: \"email\",\n  search: \"search\",\n  number: \"number\",\n  tel: \"tel\",\n  url: \"url\",\n};\n\nexport interface TextFieldProps {\n  id: InputElementProps[\"id\"];\n  name: InputElementProps[\"name\"];\n  type: keyof typeof validInputTypes;\n  value?: InputElementProps[\"value\"];\n  labelText: string;\n  hint?: string;\n  errorMessage?: string;\n  autoComplete?: InputElementProps[\"autoComplete\"];\n}\n\nexport function TextField({\n  id,\n  name,\n  type,\n  value,\n  labelText,\n  hint,\n  errorMessage,\n  autoComplete,\n}: TextFieldProps) {\n  return (\n    <>\n      {labelText ? <label htmlFor={id}>{labelText}</label> : null}\n      {hint ? <p id={`${id}-hint`}>{hint}</p> : null}\n      <p id={`${id}-error`} hidden={errorMessage ? false : true}>\n        {errorMessage}\n      </p>\n      <input\n        name={name}\n        id={id}\n        type={type}\n        autoComplete={autoComplete}\n        value={value}\n      />\n    </>\n  );\n}\n", "import React from \"react\";\n\nimport \"./Section.css\";\n\nexport interface SectionProps {\n  children: React.ReactNode;\n  name: string;\n  contain?: boolean;\n}\n\nexport function Section({ children, name, contain = false }: SectionProps) {\n  return (\n    <section data-section={name}>\n      {contain ? <div data-contain=\"true\">{children}</div> : children}\n    </section>\n  );\n}\n"],
  "mappings": "6iBAAA,+JCAA,MAAkB,oBASX,WAAiB,CAAE,WAAU,KAAI,QAAQ,QAAwB,CACtE,OAAQ,OACD,KACH,MAAO,yBAAC,MAAG,qBAAoB,GAAQ,CAAS,MAC7C,KACH,MAAO,yBAAC,MAAG,qBAAoB,GAAQ,CAAS,MAC7C,KACH,MAAO,yBAAC,MAAG,qBAAoB,GAAQ,CAAS,MAC7C,KACH,MAAO,yBAAC,MAAG,qBAAoB,GAAQ,CAAS,MAC7C,KACH,MAAO,yBAAC,MAAG,qBAAoB,GAAQ,CAAS,UAEhD,MAAO,yBAAC,MAAG,qBAAoB,GAAQ,CAAS,EAEtD,CCxBA,MAAkB,oBAQX,WAAc,CAAE,WAAU,QAAQ,QAAqB,CAC5D,MAAO,yBAAC,KAAE,kBAAiB,GAAQ,CAAS,CAC9C,CCVA,MAAkB,oBAMX,WAAkB,CAAE,YAA2B,CACpD,MAAO,yBAAC,UAAI,CAAS,CACvB,CAOO,WAAc,CAAE,KAAI,YAAuB,CAChD,MAAI,KAAO,KACF,wBAAC,MAAG,KAAK,QAAQ,CAAS,EAG5B,wBAAC,MAAG,KAAK,QAAQ,CAAS,CACnC,CCrBA,MAAkB,oBAEX,YAAmB,CACxB,MAAO,yBAAC,SAAG,CACb,CCJA,MAAkB,oBAMX,WAAoB,CAAE,WAAU,QAAyB,CAC9D,MAAO,yBAAC,cAAW,KAAM,GAAO,CAAS,CAC3C,CCRA,MAAkB,oBAQX,WAAc,CAAE,WAAU,OAAM,KAAK,QAAqB,CAC/D,MACE,yBAAC,KAAE,YAAW,EAAI,KAAM,GACrB,CACH,CAEJ,CCdA,MAAyC,oBAyBlC,WAAmB,CACxB,KACA,OACA,OACA,QACA,YACA,OACA,eACA,gBACiB,CACjB,MACE,iDACG,EAAY,wBAAC,SAAM,QAAS,GAAK,CAAU,EAAW,KACtD,EAAO,wBAAC,KAAE,GAAI,GAAG,UAAY,CAAK,EAAO,KAC1C,wBAAC,KAAE,GAAI,GAAG,UAAY,OAAQ,IAC3B,CACH,EACA,wBAAC,SACC,KAAM,EACN,GAAI,EACJ,KAAM,EACN,aAAc,EACd,MAAO,EACT,CACF,CAEJ,CCnDA,MAAkB,oBAUX,WAAiB,CAAE,WAAU,OAAM,UAAU,IAAuB,CACzE,MACE,yBAAC,WAAQ,eAAc,GACpB,EAAU,wBAAC,OAAI,eAAa,QAAQ,CAAS,EAAS,CACzD,CAEJ",
  "names": []
}
